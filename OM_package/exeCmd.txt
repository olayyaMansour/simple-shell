#include "dataHandlers.h"
#include "pathLib.h"
/**
 * executeCommands - execute a command using fork and execve
 * @Cmd: command to be executed
 * @str: string to hold name of the exe shell
 * forks a new process then check for fork error
 * Return: true if command has been executed
 * successfully otherwise false
 */
/*bool executeCommands(char **Cmd, char *str, short Counter)
{
	pid_t procId, waitprocId;
	char *cmdPath = NULL;

	cmdPath = (char *)pathHandler(Cmd[0], NULL, NULL);

	if (!cmdPath)
	{
	  _perror(str, Cmd[0], Counter, ": Not found\n");
	  _freeArr(Cmd);
	  return (true);
	}

	procId = fork();

	if (procId == -1)
	{
		perror("Err! Couldn't fork");
		_freeArr(Cmd);
		return (true);
	}
	else if (procId == 0)
	{
		if (execve(cmdPath, Cmd, environ) == -1)
		{
		_freeMemo(cmdPath, NULL);
		_freeArr(Cmd);
		}
	}
	else
	{
		int exitStatus;

		do {
		waitprocId = waitpid(procId, &exitStatus, 0);
		if (waitprocId == -1)
		{
		perror("Err! Couldn't wait for child process termination");
		_freeMemo(cmdPath, NULL);
		_freeArr(Cmd);
		return (true);
		}
		} while (waitprocId == 0);

		_freeMemo(cmdPath, NULL), _freeArr(Cmd);
		return (exitStatus != false ? (false) : (true));
	}
	return (false);
}*/
